/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateHumanArgs } from "./CreateHumanArgs";
import { UpdateHumanArgs } from "./UpdateHumanArgs";
import { DeleteHumanArgs } from "./DeleteHumanArgs";
import { HumanCountArgs } from "./HumanCountArgs";
import { HumanFindManyArgs } from "./HumanFindManyArgs";
import { HumanFindUniqueArgs } from "./HumanFindUniqueArgs";
import { Human } from "./Human";
import { Project } from "../../project/base/Project";
import { HumanService } from "../human.service";
@graphql.Resolver(() => Human)
export class HumanResolverBase {
  constructor(protected readonly service: HumanService) {}

  async _humansMeta(
    @graphql.Args() args: HumanCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Human])
  async humans(@graphql.Args() args: HumanFindManyArgs): Promise<Human[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Human, { nullable: true })
  async human(
    @graphql.Args() args: HumanFindUniqueArgs
  ): Promise<Human | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Human)
  async createHuman(@graphql.Args() args: CreateHumanArgs): Promise<Human> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        projects: args.data.projects
          ? {
              connect: args.data.projects,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Human)
  async updateHuman(
    @graphql.Args() args: UpdateHumanArgs
  ): Promise<Human | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          projects: args.data.projects
            ? {
                connect: args.data.projects,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Human)
  async deleteHuman(
    @graphql.Args() args: DeleteHumanArgs
  ): Promise<Human | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Project, {
    nullable: true,
    name: "projects",
  })
  async resolveFieldProjects(
    @graphql.Parent() parent: Human
  ): Promise<Project | null> {
    const result = await this.service.getProjects(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
